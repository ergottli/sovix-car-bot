#!/usr/bin/env python3
"""
Car Assistant Bot - Telegram –±–æ—Ç –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
"""

import asyncio
import os
import sys
from pathlib import Path

from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from dotenv import load_dotenv

from database.db import db
from handlers import admin, user
from utils.logger import setup_logging, get_logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_logging()

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    logger.error("BOT_TOKEN environment variable is required")
    sys.exit(1)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await db.connect()
        logger.info("Database connected successfully")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        await create_tables()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–æ–≤
        await init_templates()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        await init_admins()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
        dp = Dispatcher()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤
        dp.include_router(admin.router)
        dp.include_router(user.router)
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("Starting bot...")
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"Error starting bot: {e}")
        raise
    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        await db.close()
        logger.info("Bot stopped")

async def create_tables():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ß–∏—Ç–∞–µ–º SQL —Ñ–∞–π–ª —Å —Å—Ö–µ–º–æ–π
        sql_file = Path(__file__).parent / "database" / "models.sql"
        if sql_file.exists():
            with open(sql_file, 'r', encoding='utf-8') as f:
                sql_content = f.read()
            
            async with db.pool.acquire() as conn:
                await conn.execute(sql_content)
            logger.info("Database tables created successfully")
        else:
            logger.warning("SQL schema file not found, tables may not be created")
    except Exception as e:
        logger.error(f"Error creating tables: {e}")
        raise

async def init_templates():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–æ–≤ —Ç–µ–∫—Å—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        templates = [
            ('welcome_text', '–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∫–∏—Ç–∞–π—Å–∫–∏–º –º–∞—à–∏–Ω–∞–º ‚Äî –ø–æ–º–æ–≥—É —Å —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–µ–π, –¢–û, –æ—à–∏–±–∫–∞–º–∏ –∏ —Å–æ–≤–µ—Ç–∞–º–∏.', '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞'),
            ('support_text', '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å —Å –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–æ–º, –ø–∏—à–∏—Ç–µ https://t.me/PerovV12', '–¢–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É'),
            ('processing_text', 'ü§î –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å...', '–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'),
            ('rag_error_text', '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ RAG API'),
            ('limit_exceeded_text', '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤', '–°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞'),
            ('media_not_supported_text', '–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å. –ö–∞—Ä—Ç–∏–Ω–∫–∏ –∏ –∞—É–¥–∏–æ —è –ø–æ–∫–∞ –Ω–µ –ø–æ–Ω–∏–º–∞—é, –Ω–æ —É–∂–µ —É—á—É—Å—å)', '–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫, –∞—É–¥–∏–æ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤'),
        ]
        
        async with db.pool.acquire() as conn:
            for key, value, description in templates:
                await conn.execute("""
                    INSERT INTO text_templates (key, value, description)
                    VALUES ($1, $2, $3)
                    ON CONFLICT (key) DO UPDATE SET value = EXCLUDED.value, updated_at = NOW()
                """, key, value, description)
                logger.info(f"Template '{key}' initialized")
        
        logger.info("All templates initialized successfully")
        
    except Exception as e:
        logger.warning(f"Error initializing templates (may already exist): {e}")
        # –ù–µ –ø–∞–¥–∞–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ, —Ç–∞–∫ –∫–∞–∫ —à–∞–±–ª–æ–Ω—ã –º–æ–≥—É—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å

async def init_admins():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    try:
        admin_ids_str = os.getenv('ADMIN_USER_IDS', '')
        if not admin_ids_str:
            logger.info("No ADMIN_USER_IDS set, skipping admin initialization")
            return
        
        # –ü–∞—Ä—Å–∏–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
        admin_list = []
        for admin_str in admin_ids_str.split(','):
            admin_str = admin_str.strip()
            # –§–æ—Ä–º–∞—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å: "363046871" –∏–ª–∏ "363046871@ergottli
            parts = admin_str.split('@')
            if len(parts) > 0:
                user_id = parts[0].strip()
                try:
                    user_id_int = int(user_id)
                    # –§–æ—Ä–º–∏—Ä—É–µ–º username: –µ—Å–ª–∏ –µ—Å—Ç—å @ –≤ —Å—Ç—Ä–æ–∫–µ, –±–µ—Ä–µ–º —á–∞—Å—Ç—å –ø–æ—Å–ª–µ @, –∏–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º admin_{user_id}
                    if len(parts) > 1 and parts[1].strip():
                        username = f"@{parts[1].strip()}"
                    else:
                        username = f"admin_{user_id}"
                    admin_list.append((user_id_int, username))
                except ValueError:
                    logger.warning(f"Invalid admin ID: {admin_str}")
                    continue
        
        if not admin_list:
            logger.info("No valid admins found in ADMIN_USER_IDS")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –≤ –±–∞–∑—É
        async with db.pool.acquire() as conn:
            for user_id, username in admin_list:
                await conn.execute("""
                    INSERT INTO users (user_id, username, role, allowed)
                    VALUES ($1, $2, 'admin', TRUE)
                    ON CONFLICT (user_id) DO UPDATE SET 
                        role = 'admin',
                        allowed = TRUE,
                        username = EXCLUDED.username
                """, user_id, username)
                logger.info(f"Admin {user_id} ({username}) initialized")
        
        logger.info(f"All {len(admin_list)} admin(s) initialized successfully")
        
    except Exception as e:
        logger.error(f"Error initializing admins: {e}")
        raise

async def shutdown():
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    logger.info("Shutting down bot...")
    await db.close()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Fatal error: {e}")
        sys.exit(1)
