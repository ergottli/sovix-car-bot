import re
from typing import Optional, Tuple, List

def parse_command_args(text: str) -> Tuple[str, List[str]]:
    """
    –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    
    Args:
        text: –¢–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã
        
    Returns:
        –ö–æ—Ä—Ç–µ–∂ (–∫–æ–º–∞–Ω–¥–∞, —Å–ø–∏—Å–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤)
    """
    parts = text.strip().split()
    if not parts:
        return "", []
    
    command = parts[0]
    args = parts[1:] if len(parts) > 1 else []
    return command, args

def extract_user_id(text: str) -> Optional[int]:
    """
    –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ user_id –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å —á–∏—Å–ª–æ–º –∏–ª–∏ @username)
    
    Args:
        text: –¢–µ–∫—Å—Ç —Å user_id –∏–ª–∏ @username
        
    Returns:
        user_id –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    text = text.strip()
    
    # –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ
    if text.isdigit():
        return int(text)
    
    # –ï—Å–ª–∏ —ç—Ç–æ @username, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å (–±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ handlers)
    if text.startswith('@'):
        return text
    
    return None

def validate_car_description(text: str) -> bool:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    
    Args:
        text: –û–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        
    Returns:
        True –µ—Å–ª–∏ –≤–∞–ª–∏–¥–Ω–æ, False –∏–Ω–∞—á–µ
    """
    if not text or len(text.strip()) < 3:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ç–æ–ª—å–∫–æ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤
    clean_text = re.sub(r'[^\w\s\-.,]', '', text.strip())
    return len(clean_text) >= 3

def format_user_info(user: dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –≤—ã–≤–æ–¥–∞
    
    Args:
        user: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    user_id = user.get('user_id', 'N/A')
    username = user.get('username', 'N/A')
    role = user.get('role', 'N/A')
    allowed = "‚úÖ" if user.get('allowed') else "‚ùå"
    car = user.get('car', '–ù–µ —É–∫–∞–∑–∞–Ω')
    created_at = user.get('created_at', 'N/A')
    
    return f"""ID: {user_id}
Username: @{username}
–†–æ–ª—å: {role}
–î–æ—Å—Ç—É–ø: {allowed}
–ê–≤—Ç–æ–º–æ–±–∏–ª—å: {car}
–°–æ–∑–¥–∞–Ω: {created_at}"""

def format_users_list(users: List[dict], limit: int = 50, offset: int = 0) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    Args:
        users: –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        limit: –õ–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π
        offset: –°–º–µ—â–µ–Ω–∏–µ
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    """
    if not users:
        return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    
    result = f"üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ–∫–∞–∑–∞–Ω–æ {len(users)} –∏–∑ {limit + offset}):\n\n"
    
    for i, user in enumerate(users, 1):
        user_id = user.get('user_id', 'N/A')
        username = user.get('username', 'N/A')
        role = user.get('role', 'N/A')
        allowed = "‚úÖ" if user.get('allowed') else "‚ùå"
        car = user.get('car', '–ù–µ —É–∫–∞–∑–∞–Ω')
        
        result += f"{i}. ID: {user_id} | @{username} | {role} | {allowed}\n"
        if car != '–ù–µ —É–∫–∞–∑–∞–Ω':
            result += f"   üöó {car}\n"
        result += "\n"
    
    return result.strip()

def sanitize_text(text: str) -> str:
    """
    –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        
    Returns:
        –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    # –£–¥–∞–ª—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–µ
    return re.sub(r'[<>"\']', '', text.strip())
