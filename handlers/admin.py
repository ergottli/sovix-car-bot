from aiogram import Router, F, Bot
from aiogram.types import Message
from aiogram.filters import Command
import os
import csv
import io
from datetime import datetime

from database.db import db
from utils.helpers import parse_command_args, extract_user_id, format_users_list, validate_deep_link_params, parse_deep_link_params, generate_deep_link
from utils.logger import get_logger

logger = get_logger(__name__)
router = Router()

def get_root_admins() -> list:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ—Ä–Ω–µ–≤—ã—Ö –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    admin_ids_str = os.getenv('ADMIN_USER_IDS', '')
    if not admin_ids_str:
        return []
    
    try:
        return [int(uid.strip()) for uid in admin_ids_str.split(',') if uid.strip().isdigit()]
    except:
        return []

async def get_user_id_by_username(bot: Bot, username: str) -> int | None:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ user_id –ø–æ username —á–µ—Ä–µ–∑ Telegram Bot API
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        username: Username –±–µ–∑ @
        
    Returns:
        user_id –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    try:
        # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
        username = username.lstrip('@')
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º getChat –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        # –≠—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª —Å –±–æ—Ç–æ–º
        chat = await bot.get_chat(f"@{username}")
        return chat.id
    except Exception as e:
        logger.error(f"Error getting user_id for @{username}: {e}")
        return None

@router.message(Command("bootstrap"))
async def cmd_bootstrap(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    command, args = parse_command_args(message.text)
    
    if not args:
        await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /bootstrap <—Å–µ–∫—Ä–µ—Ç>", parse_mode=None)
        return
    
    secret = args[0]
    user_id = message.from_user.id
    username = message.from_user.username
    
    try:
        success = await db.bootstrap_admin(user_id, username, secret)
        if success:
            await message.reply("""‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!</b>

–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /add_user - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ /del_user - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  
‚Ä¢ /list_users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ /pending_users - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º.""", parse_mode="HTML")
        else:
            await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å–µ–∫—Ä–µ—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    except Exception as e:
        logger.error(f"Error in bootstrap: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

@router.message(Command("del_user"))
async def cmd_delete_user(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not await db.is_admin(message.from_user.id):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    command, args = parse_command_args(message.text)
    
    if not args:
        await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /del_user <id –∏–ª–∏ @username>", parse_mode=None)
        return
    
    try:
        user_identifier = args[0]
        user_id = None
        
        # –ï—Å–ª–∏ —ç—Ç–æ @username, –ø–æ–ª—É—á–∞–µ–º user_id
        if user_identifier.startswith('@'):
            username = user_identifier.lstrip('@')
            user_id = await get_user_id_by_username(message.bot, username)
            
            if not user_id:
                await message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª —Å –±–æ—Ç–æ–º.")
                return
        else:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
            user_id = extract_user_id(user_identifier)
            if not user_id or not isinstance(user_id, int):
                await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ @username.")
                return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ —É–¥–∞–ª—è–µ–º —Å–µ–±—è
        if user_id == message.from_user.id:
            await message.reply("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è.")
            return
        
        success = await db.delete_user(user_id)
        if success:
            if user_identifier.startswith('@'):
                await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_identifier.lstrip('@')} (ID: {user_id}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
            else:
                await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
        else:
            await message.reply(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            
    except Exception as e:
        logger.error(f"Error deleting user: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

@router.message(Command("list_users"))
async def cmd_list_users(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    
    /list_users - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    /list_users top - —Ç–æ–ø 50 –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤–æ–ø—Ä–æ—Å–æ–≤
    /list_users csv - –≤—ã–≥—Ä—É–∑–∫–∞ CSV
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not await db.is_admin(message.from_user.id):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    command, args = parse_command_args(message.text)
    mode = args[0] if args else "default"
    
    try:
        if mode == "csv":
            # CSV –≤—ã–≥—Ä—É–∑–∫–∞
            users = await db.list_all_users_for_csv()
            
            if not users:
                await message.reply("üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º CSV
            output = io.StringIO()
            writer = csv.writer(output)
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            writer.writerow([
                'user_id', 'username', 'role', 'allowed', 'car', 'created_at',
                'question_count', 'src', 'campaign', 'ad'
            ])
            
            # –î–∞–Ω–Ω—ã–µ
            for user in users:
                writer.writerow([
                    user['user_id'],
                    user['username'],
                    user['role'],
                    user['allowed'],
                    user.get('car', ''),
                    user['created_at'],
                    user.get('question_count', 0),
                    user.get('src', ''),
                    user.get('campaign', ''),
                    user.get('ad', '')
                ])
            
            csv_content = output.getvalue()
            csv_bytes = csv_content.encode('utf-8')
            
            from aiogram.types import BufferedInputFile
            await message.reply_document(
                BufferedInputFile(csv_bytes, filename="users.csv"),
                caption="üìä –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            )
            
        elif mode == "top":
            # –¢–æ–ø 50 –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤–æ–ø—Ä–æ—Å–æ–≤
            users = await db.list_users_top(50)
            
            if not users:
                await message.reply("üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return
            
            response = "üìã <b>–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤–æ–ø—Ä–æ—Å–æ–≤:</b>\n\n"
            
            for i, user in enumerate(users, 1):
                username = user.get('username', 'N/A')
                user_id = user['user_id']
                question_count = user.get('question_count', 0)
                allowed = "‚úÖ" if user['allowed'] else "‚ùå"
                
                response += f"{i}. @{username} (ID: {user_id}) {allowed}\n"
                response += f"   üìù –í–æ–ø—Ä–æ—Å–æ–≤: {question_count}\n\n"
                
                if len(response) > 3500:  # –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
                    await message.reply(response, parse_mode="HTML")
                    response = ""
            
            if response:
                await message.reply(response, parse_mode="HTML")
                
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = await db.list_users(limit=50, offset=0)
            
            if not users:
                await message.reply("üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return
            
            response = "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n\n"
            
            for i, user in enumerate(users, 1):
                username = user.get('username', 'N/A')
                user_id = user['user_id']
                role = user['role']
                allowed = "‚úÖ" if user['allowed'] else "‚ùå"
                car = user.get('car', '')
                
                response += f"{i}. @{username} (ID: {user_id})\n"
                response += f"   –†–æ–ª—å: {role} {allowed}\n"
                if car:
                    response += f"   üöó {car}\n"
                response += "\n"
                
                if len(response) > 3500:
                    await message.reply(response, parse_mode="HTML")
                    response = ""
            
            if response:
                await message.reply(response, parse_mode="HTML")
            
    except Exception as e:
        logger.error(f"Error listing users: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

@router.message(Command("generate_link"))
async def cmd_generate_link(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ deep-link –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Ç—Ä–∞—Ñ–∏–∫–∞"""
    if not await db.is_admin(message.from_user.id):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    command, args = parse_command_args(message.text)
    
    if not args:
        help_text = """üîó <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Å—Å—ã–ª–æ–∫</b>

<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>
/generate_link –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

<b>–§–æ—Ä–º–∞—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:</b>
cmp=–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–∞–º–ø–∞–Ω–∏–∏&src=–∏—Å—Ç–æ—á–Ω–∏–∫&ad=–±–∞–Ω–Ω–µ—Ä

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
/generate_link cmp=winter_2025_blogger&src=tg&ad=banner1
/generate_link cmp=summer2025&src=fb&ad=post1
/generate_link cmp=test&src=vk&ad=banner2

<b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>
‚Ä¢ <code>cmp</code> - –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: winter_2025_blogger)
‚Ä¢ <code>src</code> - –∏—Å—Ç–æ—á–Ω–∏–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä: tg, fb, vk, youtube)
‚Ä¢ <code>ad</code> - ID –±–∞–Ω–Ω–µ—Ä–∞/–ø–æ—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: banner1)

<b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>
–ë–æ—Ç –≤–µ—Ä–Ω—ë—Ç –≥–æ—Ç–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤ —Ä–µ–∫–ª–∞–º–µ."""
        await message.reply(help_text, parse_mode="HTML")
        return
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    params_str = " ".join(args)
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if not validate_deep_link_params(params_str):
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: cmp=name&src=source&ad=banner\n"
            "–ü—Ä–∏–º–µ—Ä: /generate_link cmp=winter_2025&src=tg&ad=banner1",
            parse_mode=None
        )
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        import os
        bot_username = os.getenv('BOT_USERNAME', 'car_sovix_bot')
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
        deep_link = generate_deep_link(params_str, bot_username)
        
        # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        params = parse_deep_link_params(params_str)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = f"""üîó <b>–†–µ–∫–ª–∞–º–Ω–∞—è —Å—Å—ã–ª–∫–∞</b>

<b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>
‚Ä¢ –ö–∞–º–ø–∞–Ω–∏—è: <code>{params.get('cmp', 'N/A')}</code>
‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫: <code>{params.get('src', 'N/A')}</code>
‚Ä¢ –ë–∞–Ω–Ω–µ—Ä: <code>{params.get('ad', 'N/A')}</code>

<b>–ì–æ—Ç–æ–≤–∞—è —Å—Å—ã–ª–∫–∞:</b>
<code>{deep_link}</code>

<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>
–†–∞–∑–º–µ—Å—Ç–∏—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –≤ –≤–∞—à–µ–º —Ä–µ–∫–ª–∞–º–Ω–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–∏. 
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –ø–µ—Ä–µ—à–µ–¥—à–∏–µ –ø–æ –Ω–µ–π, –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–µ–Ω—ã –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ."""
        
        await message.reply(response, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error generating deep link: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏.")

@router.message(Command("help"))
async def cmd_help(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
    user_id = message.from_user.id
    is_admin = await db.is_admin(user_id)
    is_user_allowed = await db.is_user_allowed(user_id)
    
    if is_admin:
        # –°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        help_text = """ü§ñ <b>Car Assistant Bot - –°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/my_car - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å
/set_car - –£–∫–∞–∑–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å
/support - –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

<b>AI-–ø–æ–º–æ—â–Ω–∏–∫:</b>
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ –≤–∞—à–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!

<b>–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>
/add_admin @username - –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
/del_admin @username - –£–¥–∞–ª–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
/block_user tg_id/@username - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/unblock_user tg_id/@username - –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/list_users - –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/list_users top - –¢–æ–ø 50 –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤–æ–ø—Ä–æ—Å–æ–≤
/list_users csv - –í—ã–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ CSV
/change_user_week_limit N - –ò–∑–º–µ–Ω–∏—Ç—å –Ω–µ–¥–µ–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –≤—Å–µ—Ö
/change_user_week_limit tg_id/@username N - –õ–∏–º–∏—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/change_user_abs_limit N - –ò–∑–º–µ–Ω–∏—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –≤—Å–µ—Ö
/change_user_abs_limit tg_id/@username N - –õ–∏–º–∏—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

<b>üîó –†–µ–∫–ª–∞–º–Ω—ã–µ —Å—Å—ã–ª–∫–∏:</b>
/generate_link cmp=–∫–∞–º–ø–∞–Ω–∏—è&src=–∏—Å—Ç–æ—á–Ω–∏–∫&ad=–±–∞–Ω–Ω–µ—Ä

<b>üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
/stat [–ø–µ—Ä–∏–æ–¥] - –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/stat users [–ø–µ—Ä–∏–æ–¥] csv - –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è (CSV)
/stat users_per_day [–ø–µ—Ä–∏–æ–¥] csv - –ü–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (CSV)

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
/generate_link cmp=winter_2025&src=tg&ad=banner1
/stat day - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å
/stat users month csv - —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞ –º–µ—Å—è—Ü
/stat users_per_day day csv - –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∑–∞ –¥–µ–Ω—å

<b>–ü–µ—Ä–∏–æ–¥—ã:</b> day (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é), month (30 –¥–Ω–µ–π), year (365 –¥–Ω–µ–π)

<b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ @username, –ø–æ–ª—É—á–∞—Ç –¥–æ—Å—Ç—É–ø –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –±–æ—Ç—É.

"""
    elif is_user_allowed:
        # –°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        help_text = """ü§ñ <b>Car Assistant Bot - –°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/my_car - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å
/set_car - –£–∫–∞–∑–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å
/support - –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

<b>–ú–µ–Ω—é –±–æ—Ç–∞:</b>
‚Ä¢ –ú–æ—è –º–∞—à–∏–Ω–∞ üöò
‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É

<b>AI-–ø–æ–º–æ—â–Ω–∏–∫:</b>
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ –≤–∞—à–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!

<b>–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:</b>
- –ö–∞–∫ —á–∞—Å—Ç–æ –º–µ–Ω—è—Ç—å –º–∞—Å–ª–æ?
- –ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –∑–∞–≥–æ—Ä–µ–ª—Å—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä Check Engine?
- –ö–∞–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∫ –∑–∏–º–µ?
- –ö–∞–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏ —Ç–æ—Ä–º–æ–∑–æ–≤?

"""
    else:
        # –°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –Ω–µ–∑–∞–ª–æ–≥–∏–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        help_text = """ü§ñ <b>Car Assistant Bot - –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>

<b>–û –±–æ—Ç–µ:</b>
–Ø - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –∫–∏—Ç–∞–π—Å–∫–∏—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π. –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–µ–π, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ–º, –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π –æ—à–∏–±–æ–∫ –∏ —Å–æ–≤–µ—Ç–∞–º–∏.

<b>–ß—Ç–æ —è —É–º–µ—é:</b>
- –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª—è—Ö
- –ü–æ–º–æ–≥–∞—Ç—å —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π –ø—Ä–æ–±–ª–µ–º
- –î–∞–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—é
- –°–æ—Ö—Ä–∞–Ω—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/my_car - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å
/set_car - –£–∫–∞–∑–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å
/support - –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!

"""
    
    await message.reply(help_text, parse_mode="HTML")

@router.message(Command("pending_users"))
async def cmd_pending_users(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not await db.is_admin(message.from_user.id):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        pending_users = await db.get_pending_users()
        
        if not pending_users:
            await message.reply("üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–µ—Ç.")
            return
        
        response = "üìã <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:</b>\n\n"
        
        for i, user in enumerate(pending_users, 1):
            username = user.get('username', 'N/A')
            created_at = user.get('created_at', 'N/A')
            response += f"{i}. @{username}\n"
            response += f"   –î–æ–±–∞–≤–ª–µ–Ω: {created_at}\n"
            response += f"   –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –ø–µ—Ä–≤–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –±–æ—Ç—É\n\n"
        
        await message.reply(response, parse_mode="HTML")

    except Exception as e:
        logger.error(f"Error getting pending users: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ–∂–∏–¥–∞–Ω–∏–∏.")

@router.message(Command("add_admin"))
async def cmd_add_admin(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ—Ä–Ω–µ–≤—ã—Ö –∞–¥–º–∏–Ω–æ–≤)"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ—Ä–Ω–µ–≤—ã–º –∞–¥–º–∏–Ω–æ–º
    root_admins = get_root_admins()
    if user_id not in root_admins:
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    command, args = parse_command_args(message.text)
    
    if not args:
        await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_admin @username", parse_mode=None)
        return
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º username - —É–±–∏—Ä–∞–µ–º –≤—Å–µ @ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–¥–∏–Ω
    username = args[0].lstrip('@')
    normalized_username = f"@{username}"
    
    try:
        async with db.pool.acquire() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username –≤ –±–∞–∑–µ
            existing_user = await conn.fetchrow("""
                SELECT user_id, role FROM users WHERE username = $1
            """, normalized_username)
            
            if existing_user:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å - –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å
                await conn.execute("""
                    UPDATE users
                    SET role = 'admin', allowed = TRUE
                    WHERE user_id = $1
                """, existing_user['user_id'])
                
                if existing_user['user_id'] < 0:
                    await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {normalized_username} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –ü–æ–ª—É—á–∏—Ç –ø—Ä–∞–≤–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –±–æ—Ç—É.")
                else:
                    await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {normalized_username} (ID: {existing_user['user_id']}) —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
            else:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–Ω—ã–º ID (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ö–µ—à –æ—Ç username)
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ö–µ—à –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ ID
                temp_id = -abs(hash(username)) % (10 ** 10)
                
                await conn.execute("""
                    INSERT INTO users (user_id, username, role, allowed)
                    VALUES ($1, $2, 'admin', TRUE)
                    ON CONFLICT (user_id) DO NOTHING
                """, temp_id, normalized_username)
                
                await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {normalized_username} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –ü–æ–ª—É—á–∏—Ç –ø—Ä–∞–≤–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –±–æ—Ç—É.")
        
    except Exception as e:
        logger.error(f"Error adding admin: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

@router.message(Command("del_admin"))
async def cmd_del_admin(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ—Ä–Ω–µ–≤—ã—Ö –∞–¥–º–∏–Ω–æ–≤)"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ—Ä–Ω–µ–≤—ã–º –∞–¥–º–∏–Ω–æ–º
    root_admins = get_root_admins()
    if user_id not in root_admins:
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    command, args = parse_command_args(message.text)
    
    if not args:
        await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /del_admin @username", parse_mode=None)
        return
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º username - —É–±–∏—Ä–∞–µ–º –≤—Å–µ @ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–¥–∏–Ω
    username = args[0].lstrip('@')
    normalized_username = f"@{username}"
    
    try:
        async with db.pool.acquire() as conn:
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º ID)
            target_user = await conn.fetchrow("""
                SELECT user_id, role FROM users WHERE username = $1
            """, normalized_username)
            
            if not target_user:
                await message.reply(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {normalized_username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
                return
            
            target_user_id = target_user['user_id']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –∞–¥–º–∏–Ω —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
            if target_user_id == user_id:
                await message.reply("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É —Å–∞–º–æ–≥–æ —Å–µ–±—è.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–¥–∞–ª—è–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ—Ä–Ω–µ–≤—ã–º –∞–¥–º–∏–Ω–æ–º
            if target_user_id in root_admins or target_user_id < 0:
                # –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º ID –∏–ª–∏ –∫–æ—Ä–Ω–µ–≤—ã—Ö –∞–¥–º–∏–Ω–æ–≤
                if target_user_id in root_admins:
                    await message.reply("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–∞–≤–∞ —É –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                    return
            
            # –ü–æ–Ω–∏–∂–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await conn.execute("""
                UPDATE users
                SET role = 'user'
                WHERE user_id = $1
            """, target_user_id)
            
            if target_user_id < 0:
                await message.reply(f"‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É–¥–∞–ª–µ–Ω—ã —É {normalized_username} (–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏).")
            else:
                await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {normalized_username} (ID: {target_user_id}) –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
        
    except Exception as e:
        logger.error(f"Error removing admin: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

@router.message(Command("block_user"))
async def cmd_block_user(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not await db.is_admin(message.from_user.id):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    command, args = parse_command_args(message.text)
    
    if not args:
        await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /block_user tg_id/@username", parse_mode=None)
        return
    
    try:
        user_identifier = args[0]
        
        async with db.pool.acquire() as conn:
            # –ï—Å–ª–∏ —ç—Ç–æ @username, –∏—â–µ–º –≤ –±–∞–∑–µ
            if user_identifier.startswith('@'):
                username = user_identifier.lstrip('@')
                normalized_username = f"@{username}"
                target_user = await conn.fetchrow("""
                    SELECT user_id FROM users WHERE username = $1
                """, normalized_username)
                
                if not target_user:
                    await message.reply(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {normalized_username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
                    return
                
                user_id = target_user['user_id']
            else:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
                user_id = extract_user_id(user_identifier)
                if not user_id or not isinstance(user_id, int):
                    await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ @username.", parse_mode=None)
                    return
            
            # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = await conn.execute("""
                UPDATE users SET allowed = FALSE WHERE user_id = $1
            """, user_id)
            
            if result == "UPDATE 0":
                await message.reply(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            else:
                if user_identifier.startswith('@'):
                    await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {normalized_username} (ID: {user_id}) –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
                else:
                    await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        
    except Exception as e:
        logger.error(f"Error blocking user: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

@router.message(Command("unblock_user"))
async def cmd_unblock_user(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not await db.is_admin(message.from_user.id):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    command, args = parse_command_args(message.text)
    
    if not args:
        await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unblock_user tg_id/@username", parse_mode=None)
        return
    
    try:
        user_identifier = args[0]
        
        async with db.pool.acquire() as conn:
            # –ï—Å–ª–∏ —ç—Ç–æ @username, –∏—â–µ–º –≤ –±–∞–∑–µ
            if user_identifier.startswith('@'):
                username = user_identifier.lstrip('@')
                normalized_username = f"@{username}"
                target_user = await conn.fetchrow("""
                    SELECT user_id FROM users WHERE username = $1
                """, normalized_username)
                
                if not target_user:
                    await message.reply(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {normalized_username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
                    return
                
                user_id = target_user['user_id']
            else:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
                user_id = extract_user_id(user_identifier)
                if not user_id or not isinstance(user_id, int):
                    await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ @username.", parse_mode=None)
                    return
            
            # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = await conn.execute("""
                UPDATE users SET allowed = TRUE WHERE user_id = $1
            """, user_id)
            
            if result == "UPDATE 0":
                await message.reply(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            else:
                if user_identifier.startswith('@'):
                    await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {normalized_username} (ID: {user_id}) —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
                else:
                    await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        
    except Exception as e:
        logger.error(f"Error unblocking user: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

@router.message(Command("change_user_week_limit"))
async def cmd_change_user_week_limit(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not await db.is_admin(message.from_user.id):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    command, args = parse_command_args(message.text)
    
    if len(args) < 1:
        await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /change_user_week_limit N –∏–ª–∏ /change_user_week_limit tg_id/@username N")
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if len(args) == 1:
            # –ò–∑–º–µ–Ω—è–µ–º –¥–ª—è –≤—Å–µ—Ö
            limit_value = args[0]
            if limit_value.lower() == 'off':
                limit_value = None
            else:
                limit_value = int(limit_value)
                if limit_value <= 0:
                    await message.reply("‚ùå –õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
                    return
            
            await db.update_all_users_limits(weekly_limit=limit_value)
            await message.reply(f"‚úÖ –ù–µ–¥–µ–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {limit_value if limit_value else 'off'}.")
        else:
            # –ò–∑–º–µ–Ω—è–µ–º –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_identifier = args[0]
            limit_value = args[1]
            
            # –ü–æ–ª—É—á–∞–µ–º user_id
            async with db.pool.acquire() as conn:
                if user_identifier.startswith('@'):
                    username = user_identifier.lstrip('@')
                    normalized_username = f"@{username}"
                    target_user = await conn.fetchrow("""
                        SELECT user_id FROM users WHERE username = $1
                    """, normalized_username)
                    
                    if not target_user:
                        await message.reply(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {normalized_username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
                        return
                    
                    user_id = target_user['user_id']
                else:
                    user_id = extract_user_id(user_identifier)
                    if not user_id or not isinstance(user_id, int):
                        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ @username.", parse_mode=None)
                        return
            
            # –ü–∞—Ä—Å–∏–º –ª–∏–º–∏—Ç
            if limit_value.lower() == 'off':
                limit_value = None
            else:
                limit_value = int(limit_value)
                if limit_value <= 0:
                    await message.reply("‚ùå –õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
                    return
            
            await db.update_user_limits(user_id=user_id, weekly_limit=limit_value)
            
            if user_identifier.startswith('@'):
                await message.reply(f"‚úÖ –ù–µ–¥–µ–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {normalized_username} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {limit_value if limit_value else 'off'}.")
            else:
                await message.reply(f"‚úÖ –ù–µ–¥–µ–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {limit_value if limit_value else 'off'}.")
        
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ª–∏–º–∏—Ç–∞.")
    except Exception as e:
        logger.error(f"Error changing week limit: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞.")

@router.message(Command("change_user_abs_limit"))
async def cmd_change_user_abs_limit(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not await db.is_admin(message.from_user.id):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    command, args = parse_command_args(message.text)
    
    if len(args) < 1:
        await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /change_user_abs_limit N –∏–ª–∏ /change_user_abs_limit tg_id/@username N")
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if len(args) == 1:
            # –ò–∑–º–µ–Ω—è–µ–º –¥–ª—è –≤—Å–µ—Ö
            limit_value = args[0]
            if limit_value.lower() == 'off':
                limit_value = None
            else:
                limit_value = int(limit_value)
                if limit_value <= 0:
                    await message.reply("‚ùå –õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
                    return
            
            await db.update_all_users_limits(absolute_limit=limit_value)
            await message.reply(f"‚úÖ –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {limit_value if limit_value else 'off'}.")
        else:
            # –ò–∑–º–µ–Ω—è–µ–º –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_identifier = args[0]
            limit_value = args[1]
            
            # –ü–æ–ª—É—á–∞–µ–º user_id
            async with db.pool.acquire() as conn:
                if user_identifier.startswith('@'):
                    username = user_identifier.lstrip('@')
                    normalized_username = f"@{username}"
                    target_user = await conn.fetchrow("""
                        SELECT user_id FROM users WHERE username = $1
                    """, normalized_username)
                    
                    if not target_user:
                        await message.reply(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {normalized_username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
                        return
                    
                    user_id = target_user['user_id']
                else:
                    user_id = extract_user_id(user_identifier)
                    if not user_id or not isinstance(user_id, int):
                        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ @username.", parse_mode=None)
                        return
            
            # –ü–∞—Ä—Å–∏–º –ª–∏–º–∏—Ç
            if limit_value.lower() == 'off':
                limit_value = None
            else:
                limit_value = int(limit_value)
                if limit_value <= 0:
                    await message.reply("‚ùå –õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
                    return
            
            await db.update_user_limits(user_id=user_id, absolute_limit=limit_value)
            
            if user_identifier.startswith('@'):
                await message.reply(f"‚úÖ –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {normalized_username} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {limit_value if limit_value else 'off'}.")
            else:
                await message.reply(f"‚úÖ –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {limit_value if limit_value else 'off'}.")
        
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ª–∏–º–∏—Ç–∞.")
    except Exception as e:
        logger.error(f"Error changing absolute limit: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞.")

@router.message(Command("stat"))
async def cmd_stat_export(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ CSV"""
    if not await db.is_admin(message.from_user.id):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    command, args = parse_command_args(message.text)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∞—è –ø–æ–¥–∫–æ–º–∞–Ω–¥–∞
    if not args or args[0] not in ["users", "users_per_day"]:
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /stat)
        period = args[0] if args and args[0] in ["day", "month", "year"] else "day"
        
        try:
            stats = await db.get_statistics(period)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            period_names = {
                "day": "–¥–µ–Ω—å",
                "month": "–º–µ—Å—è—Ü", 
                "year": "–≥–æ–¥"
            }
            period_display = period_names.get(period, period)
            
            response = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {period_display}</b>

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥: {stats['active_users']}
‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥: {stats['new_users']}

üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏—è:</b>
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}
‚Ä¢ –ö–æ–º–∞–Ω–¥: {stats['commands']}
‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['text_messages']}

ü§ñ <b>RAG API:</b>
‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ –∫ AI: {stats['rag_requests']}
‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['rag_failed']}

üìà <b>–î–µ–π—Å—Ç–≤–∏—è:</b>
‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–æ–∫ –º–∞—à–∏–Ω: {stats['car_setted']}
‚Ä¢ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ª–∏–º–∏—Ç–æ–≤: {stats['limits_exhausted']}

üëë <b>–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</b>
"""
            
            if stats['top_users']:
                for i, user in enumerate(stats['top_users'], 1):
                    username = user.get('username', 'N/A')
                    message_count = user.get('message_count', 0)
                    response += f"{i}. {username}: {message_count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            else:
                response += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
            
            response += "\nüìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–æ–ª—è–º:</b>\n"
            for role_stat in stats['role_stats']:
                role = role_stat.get('role', 'N/A')
                count = role_stat.get('count', 0)
                role_display = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã" if role == "admin" else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
                response += f"‚Ä¢ {role_display}: {count}\n"
            
            await message.reply(response, parse_mode="HTML")

        except Exception as e:
            logger.error(f"Error getting statistics: {e}")
            await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return
    
    # CSV —ç–∫—Å–ø–æ—Ä—Ç
    subcommand = args[0]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –¥–µ–Ω—å)
    period = args[1] if len(args) > 1 and args[1] in ["day", "month", "year"] else "day"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ CSV —ç–∫—Å–ø–æ—Ä—Ç
    needs_csv = "csv" in [a.lower() for a in args]
    
    if not needs_csv:
        await message.reply("‚ùå –î–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä 'csv'.\n–ü—Ä–∏–º–µ—Ä: /stat users day csv")
        return
    
    try:
        # –í—ã—á–∏—Å–ª—è–µ–º period_start –∏ period_end
        from datetime import datetime, timedelta
        import pytz
        
        now = datetime.now(pytz.UTC)
        if period == "day":
            period_start = now - timedelta(days=1)
        elif period == "month":
            period_start = now - timedelta(days=30)
        elif period == "year":
            period_start = now - timedelta(days=365)
        else:
            period_start = now - timedelta(days=1)
        
        period_end = now
        period_start_str = period_start.strftime('%Y-%m-%d %H:%M:%S')
        period_end_str = period_end.strftime('%Y-%m-%d %H:%M:%S')
        
        if subcommand == "users":
            # –°—É–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats = await db.get_statistics(period)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º CSV
            output = io.StringIO()
            writer = csv.writer(output)
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            writer.writerow([
                'period_start', 'period_end', 'total_users', 'active_users', 'new_users',
                'total_messages', 'command_messages', 'text_messages', 'rag_requests',
                'rag_failed', 'car_setted', 'limits_exhausted'
            ])
            
            # –î–∞–Ω–Ω—ã–µ
            writer.writerow([
                period_start_str, period_end_str, stats['total_users'], stats['active_users'], stats['new_users'],
                stats['total_messages'], stats['commands'], stats['text_messages'], stats['rag_requests'],
                stats['rag_failed'], stats['car_setted'], stats['limits_exhausted']
            ])
            
            csv_content = output.getvalue()
            
        elif subcommand == "users_per_day":
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            users = await db.list_users()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º CSV
            output = io.StringIO()
            writer = csv.writer(output)
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            writer.writerow([
                'period_start', 'period_end', 'user_id', 'username', 'first_seen_at', 'last_seen_at', 
                'total_messages', 'command_messages', 'text_messages', 'rag_requests', 'rag_failed',
                'is_blocked', 'is_admin', 'car', 'limits_reached', 'src', 'campaign', 'ad',
                'car_setted', 'limits_exhausted'
            ])
            
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for user_id in [u['user_id'] for u in users]:
                analytics = await db.get_user_analytics(user_id, period)
                writer.writerow([
                    period_start_str, period_end_str,
                    analytics['user_id'], analytics['username'], analytics['first_seen_at'],
                    analytics['last_seen_at'], analytics['total_messages'], analytics['command_messages'],
                    analytics['text_messages'], analytics['rag_requests'], analytics['rag_failed'],
                    analytics['is_blocked'], analytics['is_admin'], analytics['car'],
                    analytics['limits_reached'], analytics['src'], analytics['campaign'], analytics['ad'],
                    analytics['car_setted'], analytics['limits_exhausted']
                ])
            
            csv_content = output.getvalue()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        csv_bytes = csv_content.encode('utf-8')
        from aiogram.types import BufferedInputFile
        await message.reply_document(
            BufferedInputFile(csv_bytes, filename=f"stat_{period}.csv"),
            caption=f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {period}"
        )
        
    except Exception as e:
        logger.error(f"Error exporting statistics: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
