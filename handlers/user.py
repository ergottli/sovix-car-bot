from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import base64
from urllib.parse import parse_qs
from datetime import datetime

from database.db import db
from utils.helpers import parse_command_args, validate_car_description, sanitize_text
from utils.logger import get_logger

logger = get_logger(__name__)
router = Router()

class CarStates(StatesGroup):
    waiting_for_car_description = State()

def get_reply_keyboard() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ú–æ—è –º–∞—à–∏–Ω–∞ üöò"), KeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É")]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å"
    )
    return keyboard

async def decode_start_payload(payload: str) -> dict:
    """–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ payload –∏–∑ deep link"""
    try:
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64url
        decoded = base64.urlsafe_b64decode(payload + '==')
        decoded_str = decoded.decode('utf-8')
        
        # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        params = dict(parse_qs(decoded_str))
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        result = {
            'src': params.get('src', [''])[0],
            'cmp': params.get('cmp', [''])[0],
            'ad': params.get('ad', [''])[0],
            'campaign': params.get('cmp', [''])[0],  # alias
        }
        return result
    except Exception as e:
        logger.error(f"Error decoding payload: {e}")
        return {}

@router.message(CommandStart())
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π deep links"""
    user_id = message.from_user.id
    username = message.from_user.username
    language_code = message.from_user.language_code or 'ru'
    
    # –î–ª—è /start args –ø—Ä–∏—Ö–æ–¥–∏—Ç –Ω–∞–ø—Ä—è–º—É—é (–ø–æ—Å–ª–µ –ø—Ä–æ–±–µ–ª–∞)
    # –ï—Å–ª–∏ /start@botname payload, —Ç–æ payload –≤ args
    # –ï—Å–ª–∏ /start payload, —Ç–æ —Ç–æ–∂–µ –≤ args
    payload = None
    if hasattr(message, 'text'):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ /start
        if message.text and len(message.text.split()) > 1:
            payload = message.text.split(None, 1)[1]  # –ë–µ—Ä–µ–º –≤—Å–µ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–±–µ–ª–∞
        elif hasattr(message, 'args') and message.args:
            # Fallback –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –º–µ—Ç–æ–¥–∞
            payload = ' '.join(message.args) if isinstance(message.args, list) else message.args
    
    logger.info(f"Start command received for user {user_id} (@{username}), payload: {payload}, full text: {message.text}")
    
    acquisition_data = {}
    if payload:
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º payload
        acquisition_data = await decode_start_payload(payload)
        logger.info(f"Decoded acquisition data for user {user_id}: {acquisition_data}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º ID –ø–æ username
        if username:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º username - –≤—Å–µ–≥–¥–∞ —Ö—Ä–∞–Ω–∏–º —Å @
            normalized_username = f"@{username.lstrip('@')}"
            
            async with db.pool.acquire() as conn:
                temp_user = await conn.fetchrow("""
                    SELECT user_id, role, allowed FROM users 
                    WHERE username = $1 AND user_id < 0
                """, normalized_username)
                
                if temp_user:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π
                    await conn.execute("""
                        DELETE FROM users WHERE user_id = $1
                    """, temp_user['user_id'])
                    
                    await conn.execute("""
                        INSERT INTO users (user_id, username, role, allowed)
                        VALUES ($1, $2, $3, $4)
                        ON CONFLICT (user_id) DO UPDATE 
                        SET username = EXCLUDED.username, role = EXCLUDED.role, allowed = EXCLUDED.allowed
                    """, user_id, normalized_username, temp_user['role'], temp_user['allowed'])
                    
                    logger.info(f"User {user_id} ({normalized_username}) activated from temporary ID {temp_user['user_id']}")
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
                    await db.add_user(user_id, username)
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç username, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await db.add_user(user_id, username or f"user_{user_id}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if acquisition_data and (acquisition_data.get('src') or acquisition_data.get('campaign')):
            logger.info(f"Saving acquisition data for user {user_id}: src={acquisition_data.get('src')}, campaign={acquisition_data.get('campaign')}, ad={acquisition_data.get('ad')}")
            await db.save_user_acquisition(
                user_id=user_id,
                payload_raw=payload,
                payload_decoded=str(acquisition_data),
                src=acquisition_data.get('src', ''),
                campaign=acquisition_data.get('campaign', ''),
                ad=acquisition_data.get('ad', ''),
                language_code=language_code
            )
        else:
            if payload:
                logger.warning(f"Payload present but acquisition_data is empty for user {user_id}. Payload: {payload[:100]}")
            else:
                logger.info(f"No payload for user {user_id}, acquisition data not saved")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        await db.log_action(user_id, "start", payload)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ —à–∞–±–ª–æ–Ω–∞
        welcome_text = await db.get_template('welcome_text')
        if not welcome_text:
            welcome_text = "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∫–∏—Ç–∞–π—Å–∫–∏–º –º–∞—à–∏–Ω–∞–º ‚Äî –ø–æ–º–æ–≥—É —Å —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–µ–π, –¢–û, –æ—à–∏–±–∫–∞–º–∏ –∏ —Å–æ–≤–µ—Ç–∞–º–∏."
        
        await message.reply(welcome_text, reply_markup=get_reply_keyboard(), parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error in start command: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(F.text == "–ú–æ—è –º–∞—à–∏–Ω–∞ üöò")
async def my_car_menu(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ú–æ—è –º–∞—à–∏–Ω–∞'"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = await db.get_user(user_id)
    if user and not user.get('allowed'):
        await message.reply("‚ùå –í–∞—à –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await db.log_action(user_id, "menu_action", "my_car")
    
    try:
        car_info = await db.get_car(user_id)
        if car_info:
            response = f"""üöó <b>–í–∞—à –∞–≤—Ç–æ–º–æ–±–∏–ª—å:</b>
{car_info}

–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?
‚Ä¢ /set_car - –∏–∑–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å
‚Ä¢ /delete_car - —É–¥–∞–ª–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
"""
            await message.reply(response, parse_mode="HTML")
        else:
            response = """üöó –£ –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—å.

–î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –∫–æ–º–∞–Ω–¥–æ–π:
/set_car"""
            await message.reply(response, parse_mode="HTML")
    except Exception as e:
        logger.error(f"Error in my_car_menu: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

@router.message(F.text == "–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É")
async def support_menu(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É'"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = await db.get_user(user_id)
    if user and not user.get('allowed'):
        await message.reply("‚ùå –í–∞—à –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await db.log_action(user_id, "menu_action", "support")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —à–∞–±–ª–æ–Ω–∞
    support_text = await db.get_template('support_text')
    if not support_text:
        support_text = "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å —Å –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–æ–º, –ø–∏—à–∏—Ç–µ https://t.me/PerovV12"
    
    await message.reply(support_text)

@router.message(Command("support"))
async def cmd_support(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = await db.get_user(user_id)
    if user and not user.get('allowed'):
        await message.reply("‚ùå –í–∞—à –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await db.log_action(user_id, "support_command")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —à–∞–±–ª–æ–Ω–∞
    support_text = await db.get_template('support_text')
    if not support_text:
        support_text = "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å —Å –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–æ–º, –ø–∏—à–∏—Ç–µ https://t.me/PerovV12"
    
    await message.reply(support_text)

@router.message(Command("my_car"))
async def cmd_my_car(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = await db.get_user(user_id)
    if user and not user.get('allowed'):
        await message.reply("‚ùå –í–∞—à –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await db.log_action(user_id, "my_car")
    
    try:
        car_info = await db.get_car(user_id)
        if car_info:
            response = f"""üöó <b>–í–∞—à –∞–≤—Ç–æ–º–æ–±–∏–ª—å:</b>
{car_info}

–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?
‚Ä¢ /set_car - –∏–∑–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å
‚Ä¢ /delete_car - —É–¥–∞–ª–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
"""
            await message.reply(response, parse_mode="HTML")
        else:
            response = """üöó –£ –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—å.

–î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –∫–æ–º–∞–Ω–¥–æ–π:
/set_car"""
            await message.reply(response, parse_mode="HTML")
    except Exception as e:
        logger.error(f"Error in my_car: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

@router.message(Command("delete_car"))
async def cmd_delete_car(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = await db.get_user(user_id)
    if user and not user.get('allowed'):
        await message.reply("‚ùå –í–∞—à –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await db.log_action(user_id, "delete_car")
    
    try:
        await db.set_car(user_id, None)
        await message.reply("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ —É–¥–∞–ª–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"Error deleting car: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")

@router.message(Command("set_car"))
async def cmd_set_car(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = await db.get_user(user_id)
    if user and not user.get('allowed'):
        await message.reply("‚ùå –í–∞—à –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await db.log_action(user_id, "set_car_start", "car")
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –º–∞—à–∏–Ω—ã
    await state.set_state(CarStates.waiting_for_car_description)
    await message.reply("üöó –û—Ç–ª–∏—á–Ω–æ! –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: Chery Tiggo 7 Pro 2021\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel")

@router.message(Command("cancel"), CarStates.waiting_for_car_description)
async def cancel_car_input(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    await state.clear()
    await message.reply("‚ùå –í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è –æ—Ç–º–µ–Ω—ë–Ω.")

@router.message(CarStates.waiting_for_car_description)
async def process_car_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    user_id = message.from_user.id
    
    car_description = sanitize_text(message.text)
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    if not validate_car_description(car_description):
        await message.reply("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return
    
    try:
        await db.set_car(user_id, car_description)
        await db.log_message(user_id, "command", f"set_car: {car_description[:100]}...")
        await db.log_action(user_id, "set_car", car_description[:100])
        await message.reply(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:\nüöó {car_description}")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
    except Exception as e:
        logger.error(f"Error setting car: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ.")
        await state.clear()

@router.message(F.photo | F.video | F.audio | F.voice | F.document | F.sticker | F.video_note)
async def handle_media_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ –∏ —Ç.–¥.)"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = await db.get_user(user_id)
    if user and not user.get('allowed'):
        await message.reply("‚ùå –í–∞—à –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    media_type = "unknown"
    if message.photo:
        media_type = "photo"
    elif message.video:
        media_type = "video"
    elif message.audio:
        media_type = "audio"
    elif message.voice:
        media_type = "voice"
    elif message.document:
        media_type = "document"
    elif message.sticker:
        media_type = "sticker"
    elif message.video_note:
        media_type = "video_note"
    
    await db.log_action(user_id, "media_message", media_type)
    await db.log_message(user_id, "media", media_type)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —à–∞–±–ª–æ–Ω–∞
    media_text = await db.get_template('media_not_supported_text')
    if not media_text:
        media_text = "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å. –ö–∞—Ä—Ç–∏–Ω–∫–∏ –∏ –∞—É–¥–∏–æ —è –ø–æ–∫–∞ –Ω–µ –ø–æ–Ω–∏–º–∞—é, –Ω–æ —É–∂–µ —É—á—É—Å—å)"
    
    await message.reply(media_text)

@router.message(F.text)
async def handle_text_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–æ–ø—Ä–æ—Å—ã –∫ –±–æ—Ç—É)"""
    user_id = message.from_user.id
    username = message.from_user.username
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã (–æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
    if message.text.startswith('/'):
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç, –∏–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ ID
    user = await db.get_user(user_id)
    if not user and username:
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º username - –≤—Å–µ–≥–¥–∞ —Ö—Ä–∞–Ω–∏–º —Å @
        normalized_username = f"@{username.lstrip('@')}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º ID
        async with db.pool.acquire() as conn:
            temp_user = await conn.fetchrow("""
                SELECT user_id, role, allowed FROM users 
                WHERE username = $1 AND user_id < 0
            """, normalized_username)
            
            if temp_user:
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π
                await conn.execute("""
                    DELETE FROM users WHERE user_id = $1
                """, temp_user['user_id'])
                
                await conn.execute("""
                    INSERT INTO users (user_id, username, role, allowed)
                    VALUES ($1, $2, $3, $4)
                """, user_id, normalized_username, temp_user['role'], temp_user['allowed'])
                
                logger.info(f"User {user_id} ({normalized_username}) activated from temporary ID {temp_user['user_id']}")
                user = await db.get_user(user_id)
            else:
                await db.add_user(user_id, username or f"user_{user_id}")
                user = await db.get_user(user_id)
    elif not user:
        await db.add_user(user_id, username or f"user_{user_id}")
        user = await db.get_user(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if user and not user.get('allowed'):
        await message.reply("‚ùå –í–∞—à –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return
    
    question = sanitize_text(message.text)
    if not question:
        await message.reply("‚ùå –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –≤–∞—à–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ.")
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await db.log_action(user_id, "text_question", question[:100])
    await db.log_message(user_id, "text", question[:100])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
    can_proceed, error = await db.check_and_increment_limits(user_id)
    
    if not can_proceed:
        await db.log_action(user_id, "limit_exhausted", error)
        limit_message = await db.get_template('limit_exceeded_text')
        if not limit_message:
            limit_message = "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤"
        await message.reply(limit_message)
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
    processing_text = await db.get_template('processing_text')
    if not processing_text:
        processing_text = "ü§î –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å..."
    
    processing_msg = await message.reply(processing_text)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        user = await db.get_user(user_id)
        car_info = user.get('car') if user else None
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å
        if car_info:
            contextual_question = f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {car_info}\n\n–í–æ–ø—Ä–æ—Å: {question}"
        else:
            contextual_question = question
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ RAG API
        from utils.rag_client import rag_client
        response = await rag_client.send_request(
            contextual_question,
            user_id,
            username
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        await processing_msg.delete()
        
        if response:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Ä–µ–ø–ª–∞–µ–º
            await message.reply(f"{response}")
        else:
            error_text = await db.get_template('rag_error_text')
            if not error_text:
                error_text = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            await message.reply(error_text)
            
    except Exception as e:
        logger.error(f"Error handling text message: {e}")
        try:
            await processing_msg.delete()
        except:
            pass
        
        error_text = await db.get_template('rag_error_text')
        if not error_text:
            error_text = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        await message.reply(error_text)
